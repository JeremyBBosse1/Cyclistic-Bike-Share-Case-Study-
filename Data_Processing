/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: This statement returns the total count of records by count of ride_id, the primary key of the dataset, using an Aggregate function.
*/

SELECT 
COUNT(ride_id) AS ride_count
FROM 
`bike_share_rides.april_2022`;

ride_count
371249

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: This statement returns total distinct records by the count of ride_id, the primary key of the dataset, using a DISTINCT statement and an Aggregate function.
*/

SELECT 
COUNT(DISTINCT ride_id) AS distinct_rides
FROM 
`bike_share_rides.april_2022`;

distinct_rides
371249

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: This statement returns the total number of records grouped by ride_id character length using an Aggregate function and a GROUP BY clause.
*/

SELECT 
COUNT(LENGTH(ride_id)) AS ride_id_lengths
FROM 
`bike_share_rides.april_2022`
GROUP BY 
LENGTH(ride_id);

ride_id_lengths
371000
225
3
21

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: This statement returns ride_ids with various character lengths and their total count. This statement includes a string function, an aggregate function, and a GROUP BY clause.
*/

SELECT
LENGTH(ride_id) AS ride_id_length,
COUNT(ride_id) AS ride_id_count
FROM 
`bike_share_rides.april_2022`
GROUP BY 
LENGTH(ride_id);

ride_id_length	ride_id_count
16 371000
11 225
9 3
10 21

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: This statement returns the number of ride_ids  with a ride_id length greater than 16 characters. This statement uses an aggregate function, a WHERE clause, and a GREATER THAN operator.
*/

SELECT 
COUNT(DISTINCT ride_id) AS large_ride_ids
FROM 
`bike_share_rides.april_2022`
WHERE 
LENGTH(ride_id) > 16;

large_ride_ids
0

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: This statement returns the number of ride_ids  with a character length of less than 16. This statement uses an aggregate function, a WHERE clause, and a LESS THAN operator.
*/

SELECT 
COUNT(DISTINCT ride_id) AS small_ride_ids
FROM 
`bike_share_rides.april_2022`
WHERE 
LENGTH(ride_id) < 16;

small_ride_ids
249

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION: 
The statement below is from a prior attempt at using SQLite Studio to clean the data tables from the same datasets (Naming conventions are different for this reason).  
This statement returns records where ride_length has #'s instead of time values using the WHERE clause and a LIKE operator. 
*/

SELECT
ride_id,
started_at,
ended_at,
ride_length
FROM 
september_rides_2022
WHERE ride_length LIKE '%#';

ride_id             started_at      ended_at        ride_length
5387FB2D8D6AC0F3	9/30/2022 17:27	9/30/2022 17:27	###############################################################################################################################################################################################################################################################
871B757480E7208F	9/14/2022 17:47	9/14/2022 17:47	###############################################################################################################################################################################################################################################################
4890C455C466940F	9/8/2022 18:00	9/8/2022 18:00	###############################################################################################################################################################################################################################################################
BB630AE8E6017B58	9/5/2022 17:56	9/5/2022 17:56	###############################################################################################################################################################################################################################################################
E137518FFE807752	9/28/2022 11:04	9/21/2022 6:31	###############################################################################################################################################################################################################################################################
47E70E6F8939C541	9/8/2022 15:55	9/8/2022 15:53	###############################################################################################################################################################################################################################################################
912DE8D91E0AE083	9/10/2022 18:52	9/10/2022 18:52	###############################################################################################################################################################################################################################################################
D1FF403E09EC995E	9/18/2022 19:06	9/18/2022 19:06	###############################################################################################################################################################################################################################################################
57D8340BB2C0E7B0	9/8/2022 16:04	9/8/2022 16:01	###############################################################################################################################################################################################################################################################

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 5/24/2023
DESCRIPTION:
The statement below is from a prior attempt at using SQLite Studio to clean the data tables from the same datasets (Naming conventions are different for this reason).
This statement deletes records where ride_length has #'s instead of time values using a WHERE CLAUSE and a LIKE operator. 
Logically "end_time" should be greater than "start_time" to calculate "ride_length." 
The "#" indicated inconsistent and unreliable data and was eliminated from each table.
*/

DELETE
FROM 
september_rides_2022
WHERE 
ride_length LIKE '%#';


/* 
CREATED BY: Jeremy Bosse
CREATED ON: 6/8/2023
DESCRIPTION: This statement converts the data type of the ride_length column from TIME to STRING using the CAST function. Repeated for each table in the dataset.
*/

CREATE TABLE bike_share_rides.april_22 AS
SELECT 
ride_id,
rideable_type,
started_at,
ended_at,
start_station_name,
start_station_id,
end_station_name,
end_station_id,
start_lat,
start_lng,
end_lat,
end_lng,
member_casual,
CAST(ride_length AS STRING) AS ride_length,
month,
day_of_week,
year
FROM
`bike_share_rides.april_2022`;

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 6/8/2023
DESCRIPTION: This statement converts the data type of the ride_length column from STRING to INTEGER using the CAST function. Repeated for each table in the dataset.
*/


CREATE TABLE bike_share_rides.apr_22 AS
SELECT 
ride_id,
rideable_type,
started_at,
ended_at,
start_station_name,
start_station_id,
end_station_name,
end_station_id,
start_lat,
start_lng,
end_lat,
end_lng,
member_casual,
CAST(ride_length AS INTERVAL) AS ride_length,
month,
day_of_week,
year
FROM
`bike_share_rides.april_22`;


/* 
CREATED BY: Jeremy Bosse
CREATED ON: 6/9/2023
DESCRIPTION: This statement deletes the original tables from the dataset using the DROP TABLE Statement. Repeated for each table in the dataset.
*/


DROP TABLE bike_share_rides.april_2022;


/* 
CREATED BY: Jeremy Bosse
CREATED ON: 6/9/2023
DESCRIPTION: This statement deletes the modified original table from the dataset where the 'ride_length' data type is STRING using the DROP TABLE Statement. Repeated for each table in the dataset.
*/

DROP TABLE bike_share_rides.april_22;

/* 
CREATED BY: Jeremy Bosse
CREATED ON: 8/7/2023
DESCRIPTION: 
*/


SELECT
  REPLACE(casual_avg, ':', '.') AS casual,
  REPLACE(member_avg, ':', '.') AS member,
  REPLACE(total_avg, ':', '.') AS total
FROM
(SELECT
month,
year,
FORMAT('%02d:%02d',
CAST(EXTRACT(MINUTE FROM casual_avg) AS INT64),
CAST(EXTRACT(SECOND FROM casual_avg) AS INT64)
) AS casual_avg,
FORMAT('%02d:%02d',
CAST(EXTRACT(MINUTE FROM member_avg) AS INT64),
CAST(EXTRACT(SECOND FROM member_avg) AS INT64)
) AS member_avg,
FORMAT('%02d:%02d',
CAST(EXTRACT(MINUTE FROM total_avg) AS INT64),
CAST(EXTRACT(SECOND FROM total_avg) AS INT64)
) AS total_avg
FROM
`bike_share_rides.avg_ride_length_by_member`
ORDER BY
year ASC,
month ASC);


/* 
CREATED BY: Jeremy Bosse
CREATED ON: 8/7/2023
DESCRIPTION: 
*/



SELECT
day_of_week,
  REPLACE(casual, ':', '.') AS casual,
  REPLACE(member, ':', '.') AS member,
  REPLACE(total_avg, ':', '.') AS total
FROM
(SELECT
day_of_week,
FORMAT('%02d:%02d',
CAST(EXTRACT(MINUTE FROM casual) AS INT64),
CAST(EXTRACT(SECOND FROM casual) AS INT64)
) AS casual,
FORMAT('%02d:%02d',
CAST(EXTRACT(MINUTE FROM member) AS INT64),
CAST(EXTRACT(SECOND FROM member) AS INT64)
) AS member,
FORMAT('%02d:%02d',
CAST(EXTRACT(MINUTE FROM daily_member_casual_avg) AS INT64),
CAST(EXTRACT(SECOND FROM daily_member_casual_avg) AS INT64)
) AS total_avg
FROM
`bike_share_rides.user_daily_avg`
ORDER BY
day_of_week ASC)
ORDER BY
day_of_week ASC;
